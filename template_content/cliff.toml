# cliff.toml

[changelog]
# A header that is added to the changelog.
# The format is based on Keep a Changelog.
header = """
# Changelog
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
"""
# The template for the release body.
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [Unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}\
    ### {{ group | upper_first }}
    {% for commit in commits %}\
        - {% if commit.scope %}**{{ commit.scope }}:** {% endif %}{{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""

# A footer that is added to the changelog.
footer = ""
# Remove leading and trailing whitespaces from the changelog's body.
trim = true

[git]
# Parse commits according to the conventional commits specification.
conventional_commits = true
# Filter out commits that are not conventional commits.
filter_unconventional = false
# Process commits from the latest tag to the current HEAD.
commit_range = ".."
# The section parsers for grouping commits.
# Groups are based on the Keep a Changelog sections.
commit_parsers = [
  { message = "^feat", group = "Added" },
  { message = "^fix", group = "Fixed" },
  { message = "^docs", group = "Documentation" },
  { message = "^perf", group = "Performance" },
  { message = "^refactor", group = "Refactored" },
  { message = "^style", group = "Style" },
  { message = "^test", group = "Testing" },
  { message = "^chore\\(release\\):", skip = true }, # Skip the release commits
  { message = "^chore", group = "Changed" },
  { body = ".*BREAKING CHANGE", group = "Breaking Changes" },
]
# Protect breaking changes from being skipped.
protect_breaking_commits = true
# Sort commits by oldest first.
sort_commits = "oldest"
